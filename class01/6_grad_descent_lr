import torch
from torch import float32


def function02(tensor: torch.Tensor):
    weights = torch.randn(tensor.shape[1]).to(float32)
    weights.requires_grad = True
    return weights


def function03(x: torch.Tensor, y: torch.Tensor):
    learning_rate = 1e-2
    weights = function02(x)
    iter = 0
    loss = 2
    while loss > 1:
        y_pred = x @ weights.t()
        loss = torch.mean((y_pred - y) ** 2)
        print("iter =", iter, ", loss =", loss.item())
        loss.backward()
        with torch.no_grad():
            weights -= weights.grad * learning_rate
            weights.grad.zero_()
        iter += 1
    return weights
